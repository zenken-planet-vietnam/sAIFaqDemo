{"remainingRequest":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/thread-loader/dist/cjs.js!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/babel-loader/lib/index.js!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/ts-loader/index.js??ref--15-3!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/eslint-loader/index.js??ref--14-0!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/src/store/modules/page/index.ts","dependencies":[{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/src/store/modules/page/index.ts","mtime":1641893304195},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/babel.config.js","mtime":1641544761991},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/cache-loader/dist/cjs.js","mtime":1638341829149},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/thread-loader/dist/cjs.js","mtime":1638341830219},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/babel-loader/lib/index.js","mtime":1638342835865},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/ts-loader/index.js","mtime":1638341829162},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/eslint-loader/index.js","mtime":1638342837904}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/eslint-loader/index.js??ref--14-0!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/src/store/modules/page/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\nimport axios from \"@/axios\"\nimport { analysis } from \"@/@core/libs/analysis\"\nimport { FullTextSearch } from \"@/@core/libs/search\"\nimport { BooleanSearch } from \"@/@core/libs/boolean_search\"\n\nimport { VuexModule, Module, Action, Mutation, getModule } from \"vuex-module-decorators\"\nimport store from \"@/store\"\nexport interface IPageState {\n    // package data for search\n    tagPakage: any,\n    // list all of question\n    questions: Array<any>,\n    // question results after search\n    searchResults: Array<any>,\n    // search word\n    searchWords: Array<string>,\n    // text user input\n    textSearch: String,\n    // selected tags\n    tagSearch: Array<any>,\n    // frequent asked questions\n    faqQuestions: Array<any>,\n    // search status (true: searching, false: end search)\n    searchProcess: Boolean,\n    // list tags\n    tags: Array<any>\n}\n\n@Module({ dynamic: true, store, name: 'page' })\nclass Page extends VuexModule implements IPageState {\n    // package data for search\n    public tagPakage = {\n        questions: []\n    }\n    // list all of question\n    public questions = []\n    // question results after search\n    public searchResults = []\n    // search word\n    public searchWords = []\n    // text user input\n    public textSearch = ''\n    // selected tags\n    public tagSearch = []\n    // frequent asked questions\n    public faqQuestions = []\n    // search status (true: searching, false: end search)\n    public searchProcess = false\n    // list tags\n    public tags = [\n        {\n            text: \"ticket\",\n            isSelected: false\n        },\n        {\n            text: \"pay\",\n            isSelected: false\n        }\n    ]\n\n    @Mutation\n    UPDATE_QUESTIONS(payload: any) {\n        this.questions = payload.data.map((obj: any) => ({ ...obj, isSelected: false, answers: [] }))\n        const obj = new analysis()\n        this.tagPakage = obj.analysisData(payload.data)\n    }\n    @Mutation\n    UPDATE_FAQ_QUESTIONS(payload: any) {\n        this.faqQuestions = payload.data.map((obj: any) => ({ ...obj, isSelected: false, answers: [] }))\n    }\n    @Mutation\n    UPDATE_ANSWERS(payload: any) {\n        // let question = !state.searchProcess ? state.faqQuestions.find(x => x.id === payload.id) : state.searchResults.find(x => x.id === payload.id)\n        const question: any = this.questions.find((x: any) => x.id === payload.id)\n        if (question) {\n            question.answers = payload.answers\n        }\n    }\n    @Mutation\n    UPDATE_ISESELECTED(payload: any) {\n        if (!this.searchProcess)\n            this.faqQuestions.forEach((element: any) => {\n                element.isSelected = element.id === payload\n            });\n        else\n            this.searchResults.forEach((element: any) => {\n                element.isSelected = element.id === payload\n            });\n    }\n    @Mutation\n    UPDATE_SEARCH_PROCESS(payload: any) {\n        this.searchProcess = payload\n        if (this.searchProcess === true && (!this.textSearch || this.textSearch.length === 0)) {\n            const searchResults: any = this.tagPakage.questions.map((obj: any) => ({ ...obj, isSelected: false, answers: [] }))\n            this.searchResults = searchResults\n        }\n    } @Mutation\n    UPDATE_TEXT_SEARCH(payload: any) {\n        this.textSearch = payload\n    }\n    @Mutation\n    UPDATE_QUESTIONS_FILTER(payload: any) {\n        this.textSearch = payload.text\n        this.searchWords = payload.words\n        this.searchResults = payload.result\n    }\n    @Mutation\n    UPDATE_TAG_FILTER(payload: any) {\n        const tag = this.tags.find(x => x.text === payload.text)\n        if (tag)\n            tag.isSelected = payload.isSelected\n    }\n    @Action\n    //   update question lists\n    updateQuestion(data: any) {\n        this.UPDATE_QUESTIONS(data)\n    }\n    @Action\n    // get detail answer\n    async getDetailAnswer(model: any) {\n        const { data } = await axios.get(`question/${model.questionId}/answer/${model.answerId}/`)\n        return data\n    }\n    @Action\n    // get lists answers from question id\n    async getAnswerFromQuestion(id: any) {\n        // let question = !context.state.searchProcess ? context.state.faqQuestions.find(x => x.id === id) : context.state.searchResults.find(x => x.id === id)\n        const question: any = this.questions.find((x: any) => x.id === id)\n        this.UPDATE_ISESELECTED(id)\n        if (question && question.answers.length > 0)\n            return question\n        const { data } = await axios.get(`question/${id}/answer/`)\n        if (data) {\n            const answersData: any = {\n                id,\n                answers: []\n            }\n            const answers = data.data\n            for (let index = 0; index < answers.length; index++) {\n                const element = answers[index];\n                const answer = await this.getDetailAnswer({\n                    questionId: id,\n                    answerId: element.id\n                })\n                answersData.answers.push(answer.data)\n            }\n            this.UPDATE_ANSWERS(answersData)\n        }\n        return question\n    }\n    @Action\n    // list faq questions\n    public async getQuestionsFaq() {\n        // eslint-disable-next-line no-debugger\n        const { data } = await axios.get('question/faq/')\n        this.UPDATE_FAQ_QUESTIONS(data)\n        this.UPDATE_QUESTIONS(data)\n    }\n    @Action\n    // change searchprocess value\n    updateProcess(value: any) {\n        this.UPDATE_SEARCH_PROCESS(value)\n    }\n    @Action\n    // filter candidate question\n    filterQuestions(query: any) {\n        const text = query.toLowerCase().trim()\n        // let search = new FullTextSearch(state.tagPakage)\n        const search = new BooleanSearch(this.tagPakage)\n        const slectedTags = this.tags.filter(x => x.isSelected)\n        const result = search.search(text, slectedTags)\n        const data = {\n            result: result.questions.map((obj: any) => ({ ...obj, isSelected: false, answers: [] })),\n            words: result.words,\n            text\n        }\n        this.UPDATE_QUESTIONS_FILTER(data)\n        return data.result\n    }\n    @Action\n    updateTagFilter(tag: any) {\n        this.UPDATE_TAG_FILTER(tag)\n        this.filterQuestions(this.textSearch)\n    }\n}\n\nexport const PageModule = getModule(Page)\n\n"],"sourceRoot":""}]}