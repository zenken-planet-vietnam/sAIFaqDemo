{"remainingRequest":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/thread-loader/dist/cjs.js!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/babel-loader/lib/index.js!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/ts-loader/index.js??ref--15-3!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/eslint-loader/index.js??ref--14-0!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/src/@core/libs/boolean_search.ts","dependencies":[{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/src/@core/libs/boolean_search.ts","mtime":1641893300026},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/babel.config.js","mtime":1641544761991},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/cache-loader/dist/cjs.js","mtime":1638341829149},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/thread-loader/dist/cjs.js","mtime":1638341830219},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/babel-loader/lib/index.js","mtime":1638342835865},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/ts-loader/index.js","mtime":1638341829162},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/eslint-loader/index.js","mtime":1638342837904}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvdGhhaW5ndXllbnRhbi9Eb2N1bWVudHMvWkVOS0VOLVBMQU5FVC9zQUlGYXFEZW1vL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL3RoYWluZ3V5ZW50YW4vRG9jdW1lbnRzL1pFTktFTi1QTEFORVQvc0FJRmFxRGVtby9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy90aGFpbmd1eWVudGFuL0RvY3VtZW50cy9aRU5LRU4tUExBTkVUL3NBSUZhcURlbW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvVXNlcnMvdGhhaW5ndXllbnRhbi9Eb2N1bWVudHMvWkVOS0VOLVBMQU5FVC9zQUlGYXFEZW1vL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL1VzZXJzL3RoYWluZ3V5ZW50YW4vRG9jdW1lbnRzL1pFTktFTi1QTEFORVQvc0FJRmFxRGVtby9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiOwoKLyogZXNsaW50LWRpc2FibGUgbm8tdXNlbGVzcy1lc2NhcGUgKi8KCi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovCmltcG9ydCB7IEZ1bGxUZXh0U2VhcmNoIH0gZnJvbSAiQC9AY29yZS9saWJzL3NlYXJjaCI7CmltcG9ydCB0aW55U2VnbWVudGVyIGZyb20gIkAvQGNvcmUvbGlicy90aW55U2VnbWVudGVyIjsKaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gJy4vZXhwcmVzc2lvbic7CmV4cG9ydCB2YXIgQm9vbGVhblNlYXJjaCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Z1bGxUZXh0U2VhcmNoKSB7CiAgX2luaGVyaXRzKEJvb2xlYW5TZWFyY2gsIF9GdWxsVGV4dFNlYXJjaCk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQm9vbGVhblNlYXJjaCk7CgogIGZ1bmN0aW9uIEJvb2xlYW5TZWFyY2goc2NyaXB0RGF0YSkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCb29sZWFuU2VhcmNoKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjcmlwdERhdGEpOwogICAgX3RoaXMuc2NyaXB0RGF0YSA9IHNjcmlwdERhdGE7CiAgICBfdGhpcy5sZXZlbldvcmRzID0gW107CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQm9vbGVhblNlYXJjaCwgW3sKICAgIGtleTogInNlYXJjaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2VhcmNoKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7CiAgICAgIHZhciB0YWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTsKCiAgICAgIGlmIChxdWVyeS5sZW5ndGggPCAxICYmIHRhZ3MubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHF1ZXN0aW9uczogdGhpcy5zY3JpcHREYXRhLnF1ZXN0aW9ucywKICAgICAgICAgIHdvcmRzOiBbXQogICAgICAgIH07CiAgICAgIH0KCiAgICAgIHZhciB3b3JkcyA9IHRpbnlTZWdtZW50ZXIuc2VnbWVudE5vbmVTcGFjZShxdWVyeSk7CiAgICAgIHRhZ3MuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgIHdvcmRzLnB1c2goZWxlbWVudC50ZXh0KTsKICAgICAgfSk7CiAgICAgIHZhciBleHByZXNzaW9uID0gbmV3IEV4cHJlc3Npb24oKTsKICAgICAgdmFyIHBvc3RmaXggPSBleHByZXNzaW9uLmNyZWF0ZUJpbmFyeVRyZWUocXVlcnkpOwogICAgICB2YXIgcmVzdWx0cyA9IHRoaXMucmVjdXJzaXZlU2VhcmNoKHBvc3RmaXgpOwogICAgICB2YXIgcXVlc3Rpb25zID0gW107CiAgICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgIHF1ZXN0aW9ucy5wdXNoKF90aGlzMi5zY3JpcHREYXRhLnF1ZXN0aW9ucy5maW5kKGZ1bmN0aW9uICh4KSB7CiAgICAgICAgICByZXR1cm4geC5pZCA9PT0gZWxlbWVudDsKICAgICAgICB9KSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gewogICAgICAgIC8vIHF1ZXN0aW9uczogWy4uLm5ldyBTZXQoWy4uLnVuaW9uUXVlc3Rpb25zLCAuLi5pbnRlcnNlY3RRdWVzdGlvbnMsIC4uLmV4Y2x1ZGVRdWVzdGlvbnNdKV0sCiAgICAgICAgcXVlc3Rpb25zOiBxdWVzdGlvbnMsCiAgICAgICAgd29yZHM6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkod29yZHMubWFwKGZ1bmN0aW9uICh4KSB7CiAgICAgICAgICByZXR1cm4geC5yZXBsYWNlKC9bXmEtekEtWjAtOV0vZywgJycpOwogICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoeSkgewogICAgICAgICAgcmV0dXJuIHkubGVuZ3RoID4gMDsKICAgICAgICB9KSksIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmxldmVuV29yZHMpKQogICAgICB9OwogICAgfSAvLyByZWN1cnNpdmUgc2VyY2ggZnJvbSBjaGlsZCBvcGVyYXRpb24tPiBwYXJlbnQgb3BlcmF0aW9uCgogIH0sIHsKICAgIGtleTogInJlY3Vyc2l2ZVNlYXJjaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjdXJzaXZlU2VhcmNoKG5vZGUpIHsKICAgICAgdmFyIGxlZnQgPSBbXSwKICAgICAgICAgIHJpZ2h0ID0gW107CgogICAgICBpZiAobm9kZS5sZWZ0KSB7CiAgICAgICAgbGVmdCA9IHRoaXMuZ2V0Tm9kZVJlc3VsdChub2RlLmxlZnQpOwogICAgICB9CgogICAgICBpZiAobm9kZS5vcGVyYXRpb24gIT09ICd+JyAmJiBub2RlLnJpZ2h0KSB7CiAgICAgICAgcmlnaHQgPSB0aGlzLmdldE5vZGVSZXN1bHQobm9kZS5yaWdodCk7CiAgICAgIH0gLy8gcmVzdWx0IGlzIGxlZnQg4oipIHJpZ2h0IGlmICcmJyBvcGVyYXRpb24KCgogICAgICBpZiAobm9kZS5vcGVyYXRpb24gPT09ICcmJykgewogICAgICAgIHJldHVybiBsZWZ0LmZpbHRlcihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIHJldHVybiByaWdodC5pbmNsdWRlcyh2YWx1ZSk7CiAgICAgICAgfSk7CiAgICAgIH0gLy8gcmVzdWx0IGlzIGxlZnQgK3JpZ2h0IGlmICd8JyBvcGVyYXRpb24KICAgICAgZWxzZSBpZiAobm9kZS5vcGVyYXRpb24gPT09ICd8JykgewogICAgICAgIHZhciBjb21tb25TdGFjayA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobGVmdCksIF90b0NvbnN1bWFibGVBcnJheShyaWdodCkpOyAvL2ZpbHRlciBjb21tb24KCiAgICAgICAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheShuZXcgU2V0KGNvbW1vblN0YWNrKSk7CiAgICAgIH0gLy8gcmVzdWx0IGlzIG9yaWdpbiBxdWVzdGlvbiAtbGVmdCBpZiAnficgb3BlYXJhdGlvbgogICAgICBlbHNlIGlmIChub2RlLm9wZXJhdGlvbiA9PT0gJ34nKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuc2NyaXB0RGF0YS5xdWVzdGlvbnMubWFwKGZ1bmN0aW9uICh4KSB7CiAgICAgICAgICByZXR1cm4geC5pZDsKICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gIWxlZnQuaW5jbHVkZXModmFsdWUpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gW107CiAgICB9IC8vIGdldCBub2RlIHJlc3VsdCAKICAgIC8vIGlmIG5vZGUgaXMgc3RyaW5nPT4gcmV0dXJuIHJlc3VsdCBieSBmaW5kIHRleHQKICAgIC8vIGlmIG5vZGUgaXMgb3ByZXJhdGlvbiA9PnJldHVybiAgcmVjdXJzaXZlIHNlYXJjaAoKICB9LCB7CiAgICBrZXk6ICJnZXROb2RlUmVzdWx0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROb2RlUmVzdWx0KG5vZGUpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNTdHJpbmcobm9kZSkgPyB0aGlzLmNoZWNrVGV4dEluY2x1ZGVXb3Jkcyh0aW55U2VnbWVudGVyLnJlbW92ZVN0b3BXb3JkKG5vZGUpKSA6IHRoaXMucmVjdXJzaXZlU2VhcmNoKG5vZGUpOwogICAgfQogIH0sIHsKICAgIGtleTogImlzU3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc1N0cmluZyhvYmopIHsKICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzcGxpdFRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNwbGl0VGV4dCh0ZXh0KSB7CiAgICAgIHJldHVybiB0ZXh0LnNwbGl0KCcgJykubWFwKGZ1bmN0aW9uICh4KSB7CiAgICAgICAgcmV0dXJuIHgudHJpbSgpOwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBCb29sZWFuU2VhcmNoOwp9KEZ1bGxUZXh0U2VhcmNoKTs="},{"version":3,"sources":["/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/eslint-loader/index.js??ref--14-0!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/src/@core/libs/boolean_search.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-useless-escape */\n/* eslint-disable no-unused-vars */\nimport { FullTextSearch } from \"@/@core/libs/search\";\nimport tinySegmenter from \"@/@core/libs/tinySegmenter\";\nimport { Expression } from './expression'\n\n\nexport class BooleanSearch extends FullTextSearch {\n    constructor(scriptData: any) {\n        super(scriptData)\n        this.scriptData = scriptData\n        this.levenWords = []\n    }\n    search(query: any = '', tags: any = []) {\n        if (query.length < 1 && tags.length === 0) {\n            return {\n                questions: this.scriptData.questions,\n                words: []\n            }\n        }\n        const words = tinySegmenter.segmentNoneSpace(query)\n        tags.forEach((element: any) => {\n            words.push(element.text)\n        });\n        const expression = new Expression;\n        const postfix = expression.createBinaryTree(query);\n        const results = this.recursiveSearch(postfix)\n        const questions: any = []\n        results.forEach((element: any) => {\n            questions.push(this.scriptData.questions.find((x: any) => x.id === element))\n        });\n        return {\n            // questions: [...new Set([...unionQuestions, ...intersectQuestions, ...excludeQuestions])],\n            questions,\n            words: [...words.map(x => x.replace(/[^a-zA-Z0-9]/g, '')).filter(y => y.length > 0), ...this.levenWords]\n        }\n    }\n    // recursive serch from child operation-> parent operation\n    recursiveSearch(node: any) {\n        let left: any = [], right: any = []\n        if (node.left) {\n            left = this.getNodeResult(node.left)\n        }\n        if (node.operation !== '~' && node.right) {\n            right = this.getNodeResult(node.right)\n        }\n        // result is left ∩ right if '&' operation\n        if (node.operation === '&') {\n            return left.filter((value: any) => right.includes(value));\n        }\n        // result is left +right if '|' operation\n        else if (node.operation === '|') {\n            const commonStack = [...left, ...right];\n            //filter common\n            return [...new Set(commonStack)];\n        }\n        // result is origin question -left if '~' opearation\n        else if (node.operation === '~') {\n            return this.scriptData.questions.map((x: any) => x.id).filter((value: any) => !left.includes(value));\n        }\n        return []\n    }\n    // get node result \n    // if node is string=> return result by find text\n    // if node is opreration =>return  recursive search\n    getNodeResult(node: any) {\n        return this.isString(node) ? this.checkTextIncludeWords(tinySegmenter.removeStopWord(node)) : this.recursiveSearch(node)\n    }\n    isString(obj: any) {\n        return (Object.prototype.toString.call(obj) === '[object String]');\n    }\n    splitText(text: any) {\n        return text.split(' ').map((x: any) => x.trim())\n    }\n}"],"sourceRoot":""}]}