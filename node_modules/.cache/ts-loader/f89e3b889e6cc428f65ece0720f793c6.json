{"remainingRequest":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/thread-loader/dist/cjs.js!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/babel-loader/lib/index.js!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/ts-loader/index.js??ref--15-3!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/eslint-loader/index.js??ref--14-0!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/src/@core/libs/expression.ts","dependencies":[{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/src/@core/libs/expression.ts","mtime":1641889903084},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/babel.config.js","mtime":1641544761991},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/cache-loader/dist/cjs.js","mtime":1638341829149},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/thread-loader/dist/cjs.js","mtime":1638341830219},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/babel-loader/lib/index.js","mtime":1638342835865},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/ts-loader/index.js","mtime":1638341829162},{"path":"/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/eslint-loader/index.js","mtime":1638342837904}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvdGhhaW5ndXllbnRhbi9Eb2N1bWVudHMvWkVOS0VOLVBMQU5FVC9zQUlGYXFEZW1vL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL3RoYWluZ3V5ZW50YW4vRG9jdW1lbnRzL1pFTktFTi1QTEFORVQvc0FJRmFxRGVtby9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmF0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwoKLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi8KZXhwb3J0IHZhciBFeHByZXNzaW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBFeHByZXNzaW9uKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4cHJlc3Npb24pOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEV4cHJlc3Npb24sIFt7CiAgICBrZXk6ICJpc0VtcHR5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VtcHR5KGFycikgewogICAgICByZXR1cm4gYXJyLmxlbmd0aCA9PT0gMDsKICAgIH0gLy8gc3BsaXQgc3RyaW5nIHRvIG9wZXJhdGlvbiAKCiAgfSwgewogICAga2V5OiAidG9Qb3N0Zml4IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b1Bvc3RmaXgoZXhwKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgcG9zdGZpeCA9IFtdOwogICAgICB2YXIgc3RhY2sgPSBbXTsKICAgICAgdmFyIHRvcCA9ICIiOwogICAgICB2YXIgdG9rZW5zID0gdGhpcy5sZXgoZXhwKTsKICAgICAgdG9rZW5zLmZvckVhY2goZnVuY3Rpb24gKHRva2VuKSB7CiAgICAgICAgaWYgKF90aGlzLmlzT3BlcmFuZCh0b2tlbikpIHsKICAgICAgICAgIHBvc3RmaXgucHVzaCh0b2tlbik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmICh0b2tlbiA9PT0gIikiKSB7CiAgICAgICAgICAgIHdoaWxlICgodG9wID0gc3RhY2sucG9wKCkpICE9PSAiKCIgJiYgIV90aGlzLmlzRW1wdHkodG9wKSkgewogICAgICAgICAgICAgIHBvc3RmaXgucHVzaCh0b3ApOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoICYmICEoc3RhY2suYXQoLTEpID09PSAiKCIpICYmIF90aGlzLnByaW9yaXR5KHN0YWNrLmF0KC0xKSkgPj0gX3RoaXMucHJpb3JpdHkodG9rZW4pKSB7CiAgICAgICAgICAgICAgcG9zdGZpeC5wdXNoKHN0YWNrLnBvcCgpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3RhY2sucHVzaCh0b2tlbik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHdoaWxlICghdGhpcy5pc0VtcHR5KHN0YWNrKSkgewogICAgICAgIHBvc3RmaXgucHVzaChzdGFjay5wb3AoKSk7CiAgICAgIH0KCiAgICAgIHBvc3RmaXggPSBwb3N0Zml4Lm1hcChmdW5jdGlvbiAoeCkgewogICAgICAgIHJldHVybiB4LnRyaW0oKTsKICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7CiAgICAgICAgcmV0dXJuIHgubGVuZ3RoID4gMDsKICAgICAgfSk7CiAgICAgIHJldHVybiBwb3N0Zml4OwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZUJpbmFyeVRyZWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUJpbmFyeVRyZWUoaW5wdXQpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgcG9zdGZpeCA9IHRoaXMudG9Qb3N0Zml4KGlucHV0KTsKICAgICAgdmFyIG9wZXJhdGlvbiA9IG51bGw7CiAgICAgIHZhciBjaGlsZE9wZXJhdGlvbiA9IG51bGw7IC8vIGlmIHBvc3RmaXggbm90IGNvbnRhaW4gb3BlcmF0aW9uICh+LHwsJikgb3IgbGVuZ2h0ID0xCiAgICAgIC8vIHJldHVybiBvcGVyYXRpb24gfCB3aXRoIGxlZnQgaXMgcG9zdGZpeCBzdHJpbmcKCiAgICAgIGlmIChwb3N0Zml4Lmxlbmd0aCA9PT0gMSB8fCBwb3N0Zml4LmZpbmQoZnVuY3Rpb24gKHgpIHsKICAgICAgICByZXR1cm4gX3RoaXMyLmlzT3BlcmF0aW9uKHgpOwogICAgICB9KSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgb3BlcmF0aW9uID0gewogICAgICAgICAgb3BlcmF0aW9uOiAnfCcsCiAgICAgICAgICBsZWZ0OiBwb3N0Zml4LmpvaW4oJyAnKQogICAgICAgIH07CiAgICAgIH0gLy8gY3JlYXRlIGJpbmFyeSB0cmVlIG9wZXJhdGlvbgogICAgICAvLyBub2RlOnsKICAgICAgLy8gICAgIGxlZnQ6IHRleHQgb3Igbm9kZSwKICAgICAgLy8gICAgIHJpZ2h0LCB0ZXh0IG9yIG5vZGUsCiAgICAgIC8vICAgICBvcGVyYXRpb3A6IHwsJix+CiAgICAgIC8vIH0KICAgICAgZWxzZSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0Zml4Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICB2YXIgZWxlbWVudCA9IHBvc3RmaXhbaV07CgogICAgICAgICAgaWYgKHRoaXMuaXNPcGVyYXRvcihlbGVtZW50KSkgewogICAgICAgICAgICBvcGVyYXRpb24gPSB7CiAgICAgICAgICAgICAgb3BlcmF0aW9uOiBlbGVtZW50CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBhbW91bnRDaGFyYWN0b3JSZW1vdmUgPSAwOwoKICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT09ICd+JyAmJiBpID4gMCkgewogICAgICAgICAgICAgIG9wZXJhdGlvbi5sZWZ0ID0gcG9zdGZpeFtpIC0gMV07CiAgICAgICAgICAgICAgYW1vdW50Q2hhcmFjdG9yUmVtb3ZlID0gMjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT09ICd8JyB8fCBlbGVtZW50ID09PSAnJicgJiYgaSA+IDEpIHsKICAgICAgICAgICAgICBvcGVyYXRpb24ubGVmdCA9IHBvc3RmaXhbaSAtIDJdOwogICAgICAgICAgICAgIG9wZXJhdGlvbi5yaWdodCA9IHBvc3RmaXhbaSAtIDFdOwogICAgICAgICAgICAgIGFtb3VudENoYXJhY3RvclJlbW92ZSA9IDM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHBvc3RmaXguc3BsaWNlKGkgLSBhbW91bnRDaGFyYWN0b3JSZW1vdmUgKyAxLCBhbW91bnRDaGFyYWN0b3JSZW1vdmUpOwogICAgICAgICAgICBpIC09IGFtb3VudENoYXJhY3RvclJlbW92ZTsKICAgICAgICAgICAgcG9zdGZpeC5zcGxpY2UoaSArIDEsIDAsIG9wZXJhdGlvbik7CiAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGNvbnNvbGUubG9nKG9wZXJhdGlvbik7CiAgICAgIHJldHVybiBvcGVyYXRpb247CiAgICB9IC8vIGNoZWNrIG5vbmUgb3BlcmF0aW9uCgogIH0sIHsKICAgIGtleTogImlzT3BlcmFuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNPcGVyYW5kKHN0cikgewogICAgICByZXR1cm4gIShzdHIgPT09ICJ8IiB8fCBzdHIgPT09ICImIiB8fCBzdHIgPT09ICJ+IiB8fCBzdHIgPT09ICIoIiB8fCBzdHIgPT09ICIpIik7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNPcGVyYXRvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNPcGVyYXRvcihzdHIpIHsKICAgICAgcmV0dXJuICF0aGlzLmlzT3BlcmFuZChzdHIpOwogICAgfQogIH0sIHsKICAgIGtleTogImlzT3BlcmF0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc09wZXJhdGlvbihzdHIpIHsKICAgICAgcmV0dXJuIHN0ciA9PT0gInwiIHx8IHN0ciA9PT0gIiYiIHx8IHN0ciA9PT0gIn4iOwogICAgfQogIH0sIHsKICAgIGtleTogInByaW9yaXR5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmlvcml0eShvcGVyYXRvcikgewogICAgICB2YXIgcHJpb3JpdHkgPSAwOwoKICAgICAgaWYgKG9wZXJhdG9yID09PSAiJiIpIHsKICAgICAgICBwcmlvcml0eSA9IDI7CiAgICAgIH0KCiAgICAgIGlmIChvcGVyYXRvciA9PT0gIn4iKSB7CiAgICAgICAgcHJpb3JpdHkgPSAzOwogICAgICB9CgogICAgICBpZiAob3BlcmF0b3IgPT09ICJ8IikgewogICAgICAgIHByaW9yaXR5ID0gMTsKICAgICAgfQoKICAgICAgaWYgKG9wZXJhdG9yID09PSAiKCIgfHwgb3BlcmF0b3IgPT09ICIpIikgewogICAgICAgIHByaW9yaXR5ID0gNDsKICAgICAgfQoKICAgICAgcmV0dXJuIHByaW9yaXR5OwogICAgfQogIH0sIHsKICAgIGtleTogImxleCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbGV4KHN0cmluZykgewogICAgICB2YXIgYmFkID0gWycgb3IgJywgJyAtJywgJyAnXTsKICAgICAgdmFyIGdvb2QgPSBbJ3wnLCAnficsICcmJ107CiAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGJhZCwgZ29vZCk7CiAgICAgIHN0cmluZyA9IHN0cmluZy50b0xvd2VyQ2FzZSgpOwogICAgICB2YXIgdG9rZW5zID0gW107CiAgICAgIHZhciB0b2tlbiA9ICIiOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy5pc09wZXJhdG9yKHN0cmluZy5jaGFyQXQoaSkpKSB7CiAgICAgICAgICBpZiAodG9rZW4pIHsKICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pOwogICAgICAgICAgfQoKICAgICAgICAgIHRva2Vucy5wdXNoKHN0cmluZy5jaGFyQXQoaSkpOwogICAgICAgICAgdG9rZW4gPSAiIjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdG9rZW4gPSB0b2tlbiArIHN0cmluZy5jaGFyQXQoaSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAodG9rZW4pIHsKICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7CiAgICAgIH0KCiAgICAgIHJldHVybiB0b2tlbnM7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRXhwcmVzc2lvbjsKfSgpOw=="},{"version":3,"sources":["/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/node_modules/eslint-loader/index.js??ref--14-0!/Users/thainguyentan/Documents/ZENKEN-PLANET/sAIFaqDemo/src/@core/libs/expression.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n\nexport class Expression {\n    isEmpty(arr: any) {\n        return arr.length === 0\n    }\n    // split string to operation \n    toPostfix(exp: any) {\n        let postfix = [];\n        const stack: any = [];\n        let top = \"\"\n        const tokens = this.lex(exp);\n        tokens.forEach(token => {\n            if (this.isOperand(token)) {\n                postfix.push(token);\n            } else {\n                if (token === \")\") {\n                    while ((top = stack.pop()) !== \"(\" && (!this.isEmpty(top))) {\n                        postfix.push(top);\n                    }\n                } else {\n                    while (\n                        (stack.length) && !(stack.at(-1) === \"(\") &&\n                        (this.priority(stack.at(-1)) >= this.priority(token))\n                    ) {\n                        postfix.push(stack.pop());\n                    }\n                    stack.push(token);\n                }\n            }\n        })\n        while (!this.isEmpty(stack)) {\n            postfix.push(stack.pop());\n        }\n        postfix = postfix.map(x => x.trim()).filter(x => x.length > 0)\n        return postfix\n    }\n\n    createBinaryTree(input: any) {\n        const postfix = this.toPostfix(input)\n        let operation: any = null\n        const childOperation = null\n        // if postfix not contain operation (~,|,&) or lenght =1\n        // return operation | with left is postfix string\n        if (postfix.length === 1 || postfix.find(x => this.isOperation(x)) === undefined) {\n            operation = {\n                operation: '|',\n                left: postfix.join(' '),\n            }\n        }\n        // create binary tree operation\n        // node:{\n        //     left: text or node,\n        //     right, text or node,\n        //     operatiop: |,&,~\n        // }\n        else {\n            for (let i = 0; i < postfix.length; i++) {\n                const element = postfix[i];\n                if (this.isOperator(element)) {\n                    operation = {\n                        operation: element,\n                    }\n                    let amountCharactorRemove = 0\n                    if (element === '~' && i > 0) {\n                        operation.left = postfix[i - 1]\n                        amountCharactorRemove = 2\n                    }\n\n                    if ((element === '|' || element === '&' && i > 1)) {\n                        operation.left = postfix[i - 2]\n                        operation.right = postfix[i - 1]\n                        amountCharactorRemove = 3\n                    }\n\n                    postfix.splice(i - amountCharactorRemove + 1, amountCharactorRemove)\n                    i -= amountCharactorRemove\n                    postfix.splice(i + 1, 0, operation)\n                    i += 1\n                }\n            }\n        }\n        console.log(operation);\n        return operation\n    }\n\n    // check none operation\n    isOperand(str: any) {\n        return !((str === \"|\") || (str === \"&\") || (str === \"~\") ||\n            (str === \"(\") || (str === \")\"));\n    }\n\n    isOperator(str: any) {\n        return !this.isOperand(str);\n    }\n    isOperation(str: any) {\n        return (str === \"|\") || (str === \"&\") || (str === \"~\")\n    }\n\n    priority(operator: any) {\n        let priority = 0;\n\n        if (operator === (\"&\")) {\n            priority = 2;\n        }\n\n        if (operator === \"~\") {\n            priority = 3;\n        }\n\n        if (operator === \"|\") {\n            priority = 1;\n        }\n\n        if (operator === \"(\" || operator === \")\") {\n            priority = 4;\n        }\n\n        return priority;\n    }\n\n    lex(string: any) {\n        const bad = [' or ', ' -', ' '];\n        const good = ['|', '~', '&'];\n        string = string.replace(bad, good);\n        string = string.toLowerCase();\n\n        const tokens = [];\n        let token = \"\";\n        for (let i = 0; i < string.length; i++) {\n            if (this.isOperator(string.charAt(i))) {\n                if (token) {\n                    tokens.push(token);\n                }\n                tokens.push(string.charAt(i));\n                token = \"\";\n            } else {\n                token = token + string.charAt(i);\n            }\n        }\n        if (token) {\n            tokens.push(token);\n        }\n        return tokens;\n    }\n}\n"],"sourceRoot":""}]}